'use strict'; // code generated by pbf v3.2.1

var ServerContainerType = exports.ServerContainerType = {
    "MT_UPDATE": {
        "value": 1,
        "options": {}
    },
    "MT_DUMP": {
        "value": 3,
        "options": {}
    },
    "MT_CLIENT_MESSAGE": {
        "value": 4,
        "options": {}
    }
};

var ClientContainerType = exports.ClientContainerType = {
    "MT_UPDATE_BBOX": {
        "value": 1,
        "options": {}
    },
    "MT_SUBSCRIBE": {
        "value": 2,
        "options": {}
    }
};

// Timestamp ========================================

var Timestamp = exports.Timestamp = {};

Timestamp.read = function (pbf, end) {
    return pbf.readFields(Timestamp._readField, {seconds: 0, nanos: 0}, end);
};
Timestamp._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.seconds = pbf.readVarint(true);
    else if (tag === 2) obj.nanos = pbf.readVarint(true);
};
Timestamp.write = function (obj, pbf) {
    if (obj.seconds) pbf.writeVarintField(1, obj.seconds);
    if (obj.nanos) pbf.writeVarintField(2, obj.nanos);
};

// MadisSonde ========================================

var MadisSonde = exports.MadisSonde = {};

MadisSonde.read = function (pbf, end) {
    return pbf.readFields(MadisSonde._readField, {sonde_validtime: undefined, updated_at: undefined, wmo_id: "", temperatureK: [], dewpointK: [], pressurehPA: [], u_windMS: [], v_windMS: [], location: undefined, station_name: ""}, end);
};
MadisSonde._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.sonde_validtime = Timestamp.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.updated_at = Timestamp.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.wmo_id = pbf.readString();
    else if (tag === 4) pbf.readPackedFloat(obj.temperatureK);
    else if (tag === 5) pbf.readPackedFloat(obj.dewpointK);
    else if (tag === 6) pbf.readPackedFloat(obj.pressurehPA);
    else if (tag === 7) pbf.readPackedFloat(obj.u_windMS);
    else if (tag === 8) pbf.readPackedFloat(obj.v_windMS);
    else if (tag === 9) obj.location = Data.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 10) obj.station_name = pbf.readString();
};
MadisSonde.write = function (obj, pbf) {
    if (obj.sonde_validtime) pbf.writeMessage(1, Timestamp.write, obj.sonde_validtime);
    if (obj.updated_at) pbf.writeMessage(2, Timestamp.write, obj.updated_at);
    if (obj.wmo_id) pbf.writeStringField(3, obj.wmo_id);
    if (obj.temperatureK) for (var i = 0; i < obj.temperatureK.length; i++) pbf.writeFloatField(4, obj.temperatureK[i]);
    if (obj.dewpointK) for (i = 0; i < obj.dewpointK.length; i++) pbf.writeFloatField(5, obj.dewpointK[i]);
    if (obj.pressurehPA) for (i = 0; i < obj.pressurehPA.length; i++) pbf.writeFloatField(6, obj.pressurehPA[i]);
    if (obj.u_windMS) for (i = 0; i < obj.u_windMS.length; i++) pbf.writeFloatField(7, obj.u_windMS[i]);
    if (obj.v_windMS) for (i = 0; i < obj.v_windMS.length; i++) pbf.writeFloatField(8, obj.v_windMS[i]);
    if (obj.location) pbf.writeMessage(9, Data.write, obj.location);
    if (obj.station_name) pbf.writeStringField(10, obj.station_name);
};

// ServerContainer ========================================

var ServerContainer = exports.ServerContainer = {};

ServerContainer.read = function (pbf, end) {
    return pbf.readFields(ServerContainer._readField, {typ: 0, client_message: "", seconds_left: 0, mystery_data: [], topics: [], sonde_updates: [], sonde_paths: [], madis_paths: [], dwd_paths: [], adsb_updates: [], adsb_paths: []}, end);
};
ServerContainer._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.typ = pbf.readVarint();
    else if (tag === 2) obj.client_message = pbf.readString();
    else if (tag === 3) obj.seconds_left = pbf.readVarint();
    else if (tag === 4) obj.mystery_data.push(pbf.readBytes());
    else if (tag === 5) obj.topics.push(pbf.readString());
    else if (tag === 10) obj.sonde_updates.push(Data.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 15) obj.sonde_paths.push(Data.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 20) obj.madis_paths.push(Data.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 25) obj.dwd_paths.push(Data.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 30) obj.adsb_updates.push(Data.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 35) obj.adsb_paths.push(Data.read(pbf, pbf.readVarint() + pbf.pos));
};
ServerContainer.write = function (obj, pbf) {
    if (obj.typ) pbf.writeVarintField(1, obj.typ);
    if (obj.client_message) pbf.writeStringField(2, obj.client_message);
    if (obj.seconds_left) pbf.writeVarintField(3, obj.seconds_left);
    if (obj.mystery_data) for (var i = 0; i < obj.mystery_data.length; i++) pbf.writeBytesField(4, obj.mystery_data[i]);
    if (obj.topics) for (i = 0; i < obj.topics.length; i++) pbf.writeStringField(5, obj.topics[i]);
    if (obj.sonde_updates) for (i = 0; i < obj.sonde_updates.length; i++) pbf.writeMessage(10, Data.write, obj.sonde_updates[i]);
    if (obj.sonde_paths) for (i = 0; i < obj.sonde_paths.length; i++) pbf.writeMessage(15, Data.write, obj.sonde_paths[i]);
    if (obj.madis_paths) for (i = 0; i < obj.madis_paths.length; i++) pbf.writeMessage(20, Data.write, obj.madis_paths[i]);
    if (obj.dwd_paths) for (i = 0; i < obj.dwd_paths.length; i++) pbf.writeMessage(25, Data.write, obj.dwd_paths[i]);
    if (obj.adsb_updates) for (i = 0; i < obj.adsb_updates.length; i++) pbf.writeMessage(30, Data.write, obj.adsb_updates[i]);
    if (obj.adsb_paths) for (i = 0; i < obj.adsb_paths.length; i++) pbf.writeMessage(35, Data.write, obj.adsb_paths[i]);
};

// BoundingBox ========================================

var BoundingBox = exports.BoundingBox = {};

BoundingBox.read = function (pbf, end) {
    return pbf.readFields(BoundingBox._readField, {min_latitude: 0, max_latitude: 0, min_longitude: 0, max_longitude: 0, min_altitude: 0, max_altitude: 0}, end);
};
BoundingBox._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.min_latitude = pbf.readFloat();
    else if (tag === 2) obj.max_latitude = pbf.readFloat();
    else if (tag === 3) obj.min_longitude = pbf.readFloat();
    else if (tag === 4) obj.max_longitude = pbf.readFloat();
    else if (tag === 5) obj.min_altitude = pbf.readFloat();
    else if (tag === 6) obj.max_altitude = pbf.readFloat();
};
BoundingBox.write = function (obj, pbf) {
    if (obj.min_latitude) pbf.writeFloatField(1, obj.min_latitude);
    if (obj.max_latitude) pbf.writeFloatField(2, obj.max_latitude);
    if (obj.min_longitude) pbf.writeFloatField(3, obj.min_longitude);
    if (obj.max_longitude) pbf.writeFloatField(4, obj.max_longitude);
    if (obj.min_altitude) pbf.writeFloatField(5, obj.min_altitude);
    if (obj.max_altitude) pbf.writeFloatField(6, obj.max_altitude);
};

// ClientContainer ========================================

var ClientContainer = exports.ClientContainer = {};

ClientContainer.read = function (pbf, end) {
    return pbf.readFields(ClientContainer._readField, {typ: 0, bbox: undefined, topics: []}, end);
};
ClientContainer._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.typ = pbf.readVarint();
    else if (tag === 2) obj.bbox = BoundingBox.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 5) obj.topics.push(pbf.readString());
};
ClientContainer.write = function (obj, pbf) {
    if (obj.typ) pbf.writeVarintField(1, obj.typ);
    if (obj.bbox) pbf.writeMessage(2, BoundingBox.write, obj.bbox);
    if (obj.topics) for (var i = 0; i < obj.topics.length; i++) pbf.writeStringField(5, obj.topics[i]);
};

// Data ========================================

var Data = exports.Data = {};

Data.read = function (pbf, end) {
    return pbf.readFields(Data._readField, {keys: [], dimensions: 2, precision: 6, feature_collection: undefined, data_type: undefined, feature: undefined, geometry: undefined}, end);
};
Data._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.keys.push(pbf.readString());
    else if (tag === 2) obj.dimensions = pbf.readVarint();
    else if (tag === 3) obj.precision = pbf.readVarint();
    else if (tag === 4) obj.feature_collection = Data.FeatureCollection.read(pbf, pbf.readVarint() + pbf.pos), obj.data_type = "feature_collection";
    else if (tag === 5) obj.feature = Data.Feature.read(pbf, pbf.readVarint() + pbf.pos), obj.data_type = "feature";
    else if (tag === 6) obj.geometry = Data.Geometry.read(pbf, pbf.readVarint() + pbf.pos), obj.data_type = "geometry";
};
Data.write = function (obj, pbf) {
    if (obj.keys) for (var i = 0; i < obj.keys.length; i++) pbf.writeStringField(1, obj.keys[i]);
    if (obj.dimensions != undefined && obj.dimensions !== 2) pbf.writeVarintField(2, obj.dimensions);
    if (obj.precision != undefined && obj.precision !== 6) pbf.writeVarintField(3, obj.precision);
    if (obj.feature_collection) pbf.writeMessage(4, Data.FeatureCollection.write, obj.feature_collection);
    if (obj.feature) pbf.writeMessage(5, Data.Feature.write, obj.feature);
    if (obj.geometry) pbf.writeMessage(6, Data.Geometry.write, obj.geometry);
};

// Data.Feature ========================================

Data.Feature = {};

Data.Feature.read = function (pbf, end) {
    return pbf.readFields(Data.Feature._readField, {geometry: undefined, id: "", id_type: undefined, int_id: 0, values: [], properties: [], custom_properties: []}, end);
};
Data.Feature._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.geometry = Data.Geometry.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 11) obj.id = pbf.readString(), obj.id_type = "id";
    else if (tag === 12) obj.int_id = pbf.readSVarint(), obj.id_type = "int_id";
    else if (tag === 13) obj.values.push(Data.Value.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 14) pbf.readPackedVarint(obj.properties);
    else if (tag === 15) pbf.readPackedVarint(obj.custom_properties);
};
Data.Feature.write = function (obj, pbf) {
    if (obj.geometry) pbf.writeMessage(1, Data.Geometry.write, obj.geometry);
    if (obj.id) pbf.writeStringField(11, obj.id);
    if (obj.int_id) pbf.writeSVarintField(12, obj.int_id);
    if (obj.values) for (var i = 0; i < obj.values.length; i++) pbf.writeMessage(13, Data.Value.write, obj.values[i]);
    if (obj.properties) pbf.writePackedVarint(14, obj.properties);
    if (obj.custom_properties) pbf.writePackedVarint(15, obj.custom_properties);
};

// Data.Geometry ========================================

Data.Geometry = {};

Data.Geometry.read = function (pbf, end) {
    return pbf.readFields(Data.Geometry._readField, {type: 0, lengths: [], coords: [], geometries: [], values: [], custom_properties: []}, end);
};
Data.Geometry._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.type = pbf.readVarint();
    else if (tag === 2) pbf.readPackedVarint(obj.lengths);
    else if (tag === 3) pbf.readPackedSVarint(obj.coords);
    else if (tag === 4) obj.geometries.push(Data.Geometry.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 13) obj.values.push(Data.Value.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 15) pbf.readPackedVarint(obj.custom_properties);
};
Data.Geometry.write = function (obj, pbf) {
    if (obj.type) pbf.writeVarintField(1, obj.type);
    if (obj.lengths) pbf.writePackedVarint(2, obj.lengths);
    if (obj.coords) pbf.writePackedSVarint(3, obj.coords);
    if (obj.geometries) for (var i = 0; i < obj.geometries.length; i++) pbf.writeMessage(4, Data.Geometry.write, obj.geometries[i]);
    if (obj.values) for (i = 0; i < obj.values.length; i++) pbf.writeMessage(13, Data.Value.write, obj.values[i]);
    if (obj.custom_properties) pbf.writePackedVarint(15, obj.custom_properties);
};

Data.Geometry.Type = {
    "POINT": {
        "value": 0,
        "options": {}
    },
    "MULTIPOINT": {
        "value": 1,
        "options": {}
    },
    "LINESTRING": {
        "value": 2,
        "options": {}
    },
    "MULTILINESTRING": {
        "value": 3,
        "options": {}
    },
    "POLYGON": {
        "value": 4,
        "options": {}
    },
    "MULTIPOLYGON": {
        "value": 5,
        "options": {}
    },
    "GEOMETRYCOLLECTION": {
        "value": 6,
        "options": {}
    }
};

// Data.FeatureCollection ========================================

Data.FeatureCollection = {};

Data.FeatureCollection.read = function (pbf, end) {
    return pbf.readFields(Data.FeatureCollection._readField, {features: [], values: [], custom_properties: []}, end);
};
Data.FeatureCollection._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.features.push(Data.Feature.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 13) obj.values.push(Data.Value.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 15) pbf.readPackedVarint(obj.custom_properties);
};
Data.FeatureCollection.write = function (obj, pbf) {
    if (obj.features) for (var i = 0; i < obj.features.length; i++) pbf.writeMessage(1, Data.Feature.write, obj.features[i]);
    if (obj.values) for (i = 0; i < obj.values.length; i++) pbf.writeMessage(13, Data.Value.write, obj.values[i]);
    if (obj.custom_properties) pbf.writePackedVarint(15, obj.custom_properties);
};

// Data.Value ========================================

Data.Value = {};

Data.Value.read = function (pbf, end) {
    return pbf.readFields(Data.Value._readField, {string_value: "", value_type: undefined, double_value: 0, pos_int_value: 0, neg_int_value: 0, bool_value: false, json_value: ""}, end);
};
Data.Value._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.string_value = pbf.readString(), obj.value_type = "string_value";
    else if (tag === 2) obj.double_value = pbf.readDouble(), obj.value_type = "double_value";
    else if (tag === 3) obj.pos_int_value = pbf.readVarint(), obj.value_type = "pos_int_value";
    else if (tag === 4) obj.neg_int_value = pbf.readVarint(), obj.value_type = "neg_int_value";
    else if (tag === 5) obj.bool_value = pbf.readBoolean(), obj.value_type = "bool_value";
    else if (tag === 6) obj.json_value = pbf.readString(), obj.value_type = "json_value";
};
Data.Value.write = function (obj, pbf) {
    if (obj.string_value) pbf.writeStringField(1, obj.string_value);
    if (obj.double_value) pbf.writeDoubleField(2, obj.double_value);
    if (obj.pos_int_value) pbf.writeVarintField(3, obj.pos_int_value);
    if (obj.neg_int_value) pbf.writeVarintField(4, obj.neg_int_value);
    if (obj.bool_value) pbf.writeBooleanField(5, obj.bool_value);
    if (obj.json_value) pbf.writeStringField(6, obj.json_value);
};
